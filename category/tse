TSE要点:
参数大小840字节+互斥锁



/**
 * 给任务携带小参数, 指定参数大小, 获取指定task嵌入的参数, 返回参数地址, 先对输入大小按8字节向上对齐, 计算可用大小(预留内存总大小-栈顶大小), 嵌入大小不能超过可用大小(超过限制返回NULL), 修改嵌入参数大小为指定的大小, 将当前缓冲区地址转为void指针并返回
 *
 *
 * \param task [in] 指定的任务
 * \param size [in] 需要携带参数的字节大小
 *
 * \return	成功返回参数指针, 失败返回NULL
 **/
void * tse_task_buf_embedded(tse_task_t *task, int size);





/**
 * 使用新的任务函数重置任务。 该任务必须已经完成或尚未开始，并且必须具有 > 0 的有效引用计数（未释放）。 这允许用户重用具有不同主体函数的任务，而不必为不同的操作重新创建任务
 *
 *
 * \param task [in] 指定的任务
 * \param task_func [in] 新任务函数
 * \param priv [in] 新任务函数参数
 *
 * \return	成功返回0, 失败返回负数错误码
 **/
int tse_task_reset(tse_task_t *task, tse_task_func_t task_func, void *priv);







/**
 * 将参数, 推入任务堆栈空间。 该API仅在任务堆栈上保留空间，不涉及数据拷贝, 获取可用大小, 输入大小按8字节向上对齐, 将参数大小累加到栈顶指针, 计算新的参数地址(固定地址+总大小-栈顶大小)并返回.
 *  
 * --------------- dtp_buf_addr 低地址(高地址-低地址是总大小)
 *
 * 
 * --------------- top_new, 返回这个位置的地址(下次从这个位置往下读size大小)
 * size, 这中间放置新参数
 * --------------- top_old
 * 
 * ---------------  高地址
 * 
 * \param task [in] 指定的任务
 * \param size [in] 需要推入参数的字节大小
 *
 * \return	成功返回参数指针, 失败返回NULL
 **/
void * tse_task_stack_push(tse_task_t *task, uint32_t size);







/**
 * 弹出任务参数, 对齐并检测输入的大小, 计算参数地址
 *
 * --------------- dtp_buf_addr 低地址(高地址-低地址是总大小)
 *
 * 
 * --------------- top_old, 返回这个位置的地址
 * size, 这中间放置新参数
 * --------------- top_new, top最终的大小在这个位置
 * 
 * --------------- 高地址
 * \param task [in] 指定的任务
 * \param size [in] 需要弹出参数的字节大小
 *
 * \return	成功返回参数指针, 失败返回NULL
 **/
void * tse_task_stack_pop(tse_task_t *task, uint32_t size);